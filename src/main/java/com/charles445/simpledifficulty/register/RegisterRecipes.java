package com.charles445.simpledifficulty.register;

import com.charles445.simpledifficulty.api.SDFluids;
import com.charles445.simpledifficulty.api.SDItems;
import com.charles445.simpledifficulty.api.SDPotions;
import com.charles445.simpledifficulty.config.ModConfig;
import com.charles445.simpledifficulty.register.crafting.FixedBrewingOreRecipe;

import net.minecraft.init.Items;
import net.minecraft.init.PotionTypes;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.IRecipe;
import net.minecraft.potion.PotionType;
import net.minecraft.potion.PotionUtils;
import net.minecraftforge.common.brewing.BrewingRecipeRegistry;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidStack;
import net.minecraftforge.fluids.FluidUtil;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.registry.GameRegistry;

public class RegisterRecipes
{
	@Mod.EventBusSubscriber
	public static class Registrar
	{
		@SubscribeEvent
		public static void registerRecipes(RegistryEvent.Register<IRecipe> event)
		{
			//Smelting
			
			//Water bottle into Purified Water Bottle (a water bottle is a potion)
			GameRegistry.addSmelting(
					PotionUtils.addPotionToItemStack(new ItemStack(Items.POTIONITEM), PotionTypes.WATER), 
					new ItemStack(SDItems.purifiedWaterBottle,1), 
					0.0f);
			
			//Water bucket into Purified bucket, which was auto generated by forge...
			GameRegistry.addSmelting(
					Items.WATER_BUCKET,
					FluidUtil.getFilledBucket(new FluidStack(SDFluids.purifiedWater, Fluid.BUCKET_VOLUME)),
					0.0f);
			
			
			//Potions
			//Avoiding using PotionHelper.addMix

			if (ModConfig.enable.coldPotionEnabled)
			{
				//Awkward to normal
				registerSameItemPotionRecipes(PotionTypes.AWKWARD, SDItems.ice_chunk, SDPotions.cold_resist_type);
				//Normal to long
				registerSameItemPotionRecipes(SDPotions.cold_resist_type, Items.REDSTONE, SDPotions.long_cold_resist_type);
				//Item to Item
				registerConversionPotionRecipes(SDPotions.cold_resist_type);
				registerConversionPotionRecipes(SDPotions.cold_resist_type);
			}

			if (ModConfig.enable.heatPotionEnabled)
			{
				//Awkward to normal
				registerSameItemPotionRecipes(PotionTypes.AWKWARD, SDItems.magma_chunk, SDPotions.heat_resist_type);
				//Normal to long
				registerSameItemPotionRecipes(SDPotions.heat_resist_type, Items.REDSTONE, SDPotions.long_heat_resist_type);
				//Item to Item
				registerConversionPotionRecipes(SDPotions.heat_resist_type);
				registerConversionPotionRecipes(SDPotions.long_heat_resist_type);
			}
		}
		
		private static void registerConversionPotionRecipes(PotionType potionType)
		{
			registerPotionRecipe(Items.POTIONITEM, potionType, Items.DRAGON_BREATH, Items.LINGERING_POTION, potionType);
			registerPotionRecipe(Items.SPLASH_POTION, potionType, Items.DRAGON_BREATH, Items.LINGERING_POTION, potionType);
			
			registerPotionRecipe(Items.POTIONITEM, potionType, Items.GUNPOWDER, Items.SPLASH_POTION, potionType);
			registerPotionRecipe(Items.LINGERING_POTION, potionType, Items.GUNPOWDER, Items.SPLASH_POTION, potionType);
		}
		
		private static void registerSameItemPotionRecipes(PotionType itemInPotionType, Item ingredient, PotionType itemOutPotionType)
		{
			registerPotionRecipe(Items.POTIONITEM, itemInPotionType, ingredient, Items.POTIONITEM, itemOutPotionType);
			registerPotionRecipe(Items.LINGERING_POTION, itemInPotionType, ingredient, Items.LINGERING_POTION, itemOutPotionType);
			registerPotionRecipe(Items.SPLASH_POTION, itemInPotionType, ingredient, Items.SPLASH_POTION, itemOutPotionType);
			
		}
		
		private static void registerPotionRecipe(Item itemIn, PotionType itemInPotionType, Item ingredient, Item itemOut, PotionType itemOutPotionType)
		{
			BrewingRecipeRegistry.addRecipe(new FixedBrewingOreRecipe(toPotion(new ItemStack(itemIn), itemInPotionType), new ItemStack(ingredient), toPotion(new ItemStack(itemOut), itemOutPotionType)));
		}
		private static ItemStack toPotion(ItemStack stack, PotionType potionType)
		{
			return PotionUtils.addPotionToItemStack(stack, potionType);
		}
	}
}
